trigger:
  batch: "true"
  branches:
    include: [ main ]
pr: none
#stages:
#- stage: testing

jobs:

  - job: papermill
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"
    # how long to run the job before automatically cancelling
    # When 0 is specified, the maximum limit is used:
    # - For 360 minutes (6 hours) on Microsoft-hosted agents with a public project and public repository
    # - For 60 minutes on Microsoft-hosted agents with a private project or private repository
    timeoutInMinutes: "960"

    pool: "lit-rtx-3090"
    # this need to have installed docker in the base image...
    container:
      image: "pytorchlightning/pytorch_lightning:base-cuda-py3.9-torch1.12-cuda11.6.1"
      options: "--gpus=all --shm-size=32g -v /usr/bin/docker:/tmp/docker:ro"

    variables:
      ACCELERATOR: CPU,GPU
      PUB_BRANCH: publication
      PATH_DATASETS: "$(Build.Repository.LocalPath)/.datasets"
      COMMIT_MSG: $(echo "$(Build.SourceVersionMessage)" | head -n 1)
      COMMIT_HASH: "$(Build.SourceVersion)"
      DEVICES: $( python -c 'print("$(Agent.Name)".split("_")[-1])' )

    steps:
    - bash: |
        echo "##vso[task.setvariable variable=CUDA_VISIBLE_DEVICES]$(DEVICES)"
        echo "##vso[task.setvariable variable=CONTAINER_ID]$(head -1 /proc/self/cgroup|cut -d/ -f3)"
      displayName: 'Set environment variables'

    - bash: |
        lspci | egrep 'VGA|3D'
        whereis nvidia
        nvidia-smi
        echo $CUDA_VISIBLE_DEVICES
        echo $CONTAINER_ID
        python --version
        pip list | grep torch
      displayName: 'Image info & NVIDIA'

    - script: |
        /tmp/docker exec -t -u 0 $CONTAINER_ID \
        sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
      displayName: 'Install Sudo in container (thanks Microsoft!)'

    - bash: |
        git fetch --all
        echo $(PUB_BRANCH)
        git ls-remote --heads origin ${PUB_BRANCH} | grep ${PUB_BRANCH} >/dev/null
        if [ "$?" == "1" ] ; then echo "Branch doesn't exist"; exit; fi
      displayName: 'Sanity branch check'

    - bash: |
        git config --global user.email "pipelines@azure.com"
        git config --global user.name "Azure Pipelines"
        printf "commit hash:\n $(COMMIT_HASH)\n"
        printf "commit message:\n $(COMMIT_MSG)\n"
      displayName: 'Set Git user'

    - bash: |
        set -e
        sudo apt-get update -q --fix-missing
        sudo apt install -y tree ffmpeg
        pip install --upgrade pip
        pip --version
        pip install --requirement requirements.txt
        pip install --requirement requirements/data.txt
        sudo pip uninstall -y horovod
        sudo pip uninstall -y torchtext  # FIXME: this is hotfix for https://github.com/Lightning-AI/lightning/pull/12676
        pip list
      displayName: 'Install dependencies'

    - bash: |
        set -e
        python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu > 0, f'GPU: {mgpu}'"
        python -m papermill --version
      displayName: 'Sanity check'

    - bash: |
        current_branch=$(cut -d '/' -f3- <<< $(Build.SourceBranch))
        printf "$current_branch\n"
        bash .actions/git-diff-sync.sh $current_branch $(PUB_BRANCH)
      displayName: 'Compare changes & sync'

    - script: |
        COUNT=$(python -c "lines = open('changed-folders.txt').readlines() ; print(len(lines))")
        printf "Changed folders: $COUNT\n"
        echo "##vso[task.setvariable variable=folders;isOutput=true]$COUNT"
      name: changed

    - script: |
        COUNT=$(python -c "lines = open('dropped-folders.txt').readlines() ; print(len(lines))")
        printf "Dropped folders: $COUNT\n"
        echo "##vso[task.setvariable variable=folders;isOutput=true]$COUNT"
      name: dropped

    - bash: |
        while IFS= read -r line; do
            python .actions/assistant.py convert-ipynb $line
        done <<< $(cat changed-folders.txt)
      condition: gt(variables['changed.folders'], 0)
      displayName: 'Generate notebook'

    - bash: |
        set -e
        mkdir $(PATH_DATASETS)
        # render the actual notebooks
        while IFS= read -r line; do
            python .actions/assistant.py bash-render $line
            cat .actions/_ipynb-render.sh
            bash .actions/_ipynb-render.sh
        done <<< $(cat changed-folders.txt)
        git status
        git commit -m "publish [GPU]: $(COMMIT_HASH)"
      condition: and(succeeded(), gt(variables['changed.folders'], 0))
      env:
        KAGGLE_USERNAME: $(KAGGLE_USERNAME)
        KAGGLE_KEY: $(KAGGLE_KEY)
      displayName: 'Render notebook'

    - bash: |
        # remove notebooks which have moved
        while IFS= read -r line; do
            git rm .notebooks/$line.ipynb
            git rm .notebooks/$line.yaml
        done <<< $(cat dropped-folders.txt)
        git status
        git commit -m "prune: $(COMMIT_HASH)"
      condition: gt(variables['dropped.folders'], 0)
      displayName: 'Prune notebook'

    - bash: |
        git status
        git push https://$(PAT_GHOST)@github.com/Lightning-AI/tutorials.git $(PUB_BRANCH)
      displayName: 'Finish push'
