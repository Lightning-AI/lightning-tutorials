trigger:
  batch: "true"
  branches:
    include: [ main, "ci/parallel-build" ]  # FIXME
pr: none
#stages:
#- stage: testing

jobs:

  - job: sync_pub
    pool:
      vmImage: 'Ubuntu-20.04'
    variables:
      ACCELERATOR: CPU,GPU
      PUB_BRANCH: publication
      COMMIT_MSG: $(echo "$(Build.SourceVersionMessage)" | head -n 1)
      COMMIT_HASH: "$(Build.SourceVersion)"
    steps:
    - bash: |
        git config --global user.email "pipelines@azure.com"
        git config --global user.name "Azure Pipelines"
        printf "commit hash:\n $(COMMIT_HASH)\n"
        printf "commit message:\n $(COMMIT_MSG)\n"
      displayName: 'Set Git user'
    - bash: |
        set -e
        git fetch --all
        echo $(PUB_BRANCH)
        git ls-remote --heads origin ${PUB_BRANCH} | grep ${PUB_BRANCH} >/dev/null
        if [ "$?" == "1" ] ; then echo "Branch doesn't exist"; exit; fi
      displayName: 'Git branch check'

    - bash: pip install -r .actions/requirements.txt
      displayName: 'Install dependencies'
    - bash: |
        current_branch=$(cut -d '/' -f3- <<< $(Build.SourceBranch))
        printf "$current_branch\n"
        bash .actions/git-diff-sync.sh $current_branch $(PUB_BRANCH)
      displayName: 'Compare changes & sync'

    - bash: |
        head=$(git rev-parse origin/main)
        printf "Head: $head\n"
        git diff --name-only $head --output=target-diff.txt
        python .actions/assistant.py group-folders --fpath_gitdiff=target-diff.txt
        printf "Changed folders:\n"
        cat changed-folders.txt
      displayName: 'Process folders'

    - bash: |
        notebooks=$(python .actions/assistant.py generate-matrix changed-folders.txt --allow_empty)
        printf "Changed notebooks: $notebooks\n"
        echo "##vso[task.setVariable variable=dirs;isOutput=true]$notebooks"
      name: mtrx
      displayName: 'Changed matrix'

    - bash: |
        # remove notebooks which have moved
        while IFS= read -r line; do
            git rm .notebooks/$line.ipynb
            git rm .notebooks/$line.yaml
        done <<< $(cat dropped-folders.txt)
        git status
        git commit -m "prune: $(COMMIT_HASH)"
      condition: gt(variables['dropped.folders'], 0)
      displayName: 'Prune notebook'

    - bash: |
        git status
        git push https://$(PAT_GHOST)@github.com/Lightning-AI/tutorials.git $(PUB_BRANCH)
      displayName: 'Finish push'

  - job: papermill
    dependsOn: sync_pub
    strategy:
      matrix: $[ dependencies.sync_pub.outputs['mtrx.dirs'] ]
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"
    # how long to run the job before automatically cancelling
    # When 0 is specified, the maximum limit is used:
    # - For 360 minutes (6 hours) on Microsoft-hosted agents with a public project and public repository
    # - For 60 minutes on Microsoft-hosted agents with a private project or private repository
    timeoutInMinutes: "180"

    pool: "$(agent-pool)"
    # this need to have installed docker in the base image...
    container:
      image: "$(docker-image)"
      options: "--runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all --shm-size=32g --name cd-container -v /usr/bin/docker:/tmp/docker:ro"

    variables:
      ACCELERATOR: CPU,GPU
      PUB_BRANCH: publication
      PATH_DATASETS: "$(Build.Repository.LocalPath)/.datasets"
      COMMIT_MSG: $(echo "$(Build.SourceVersionMessage)" | head -n 1)
      COMMIT_HASH: "$(Build.SourceVersion)"

    steps:
    - bash: |
        lspci | egrep 'VGA|3D'
        whereis nvidia
        nvidia-smi
        python --version
        pip list | grep torch
      displayName: 'Image info & NVIDIA'

    - script: |
        /tmp/docker exec -t -u 0 cd-container \
        sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
      displayName: 'Install Sudo in container (thanks Microsoft!)'

    - bash: |
        git config --global user.email "pipelines@azure.com"
        git config --global user.name "Azure Pipelines"
        printf "commit hash:\n $(COMMIT_HASH)\n"
        printf "commit message:\n $(COMMIT_MSG)\n"
      displayName: 'Set Git user'
    - bash: |
        set -e
        git fetch --all
        echo $(PUB_BRANCH)
        git ls-remote --heads origin ${PUB_BRANCH} | grep ${PUB_BRANCH} >/dev/null
        if [ "$?" == "1" ] ; then echo "Branch doesn't exist"; exit; fi
        git checkout $(PUB_BRANCH)
      displayName: 'Git check & switch branch'

    - bash: |
        set -e
        sudo apt-get update -q --fix-missing
        sudo apt install -y tree ffmpeg
        #pip install --upgrade pip
        #pip --version
        pip install -r requirements.txt -r requirements/data.txt
        pip list
      displayName: 'Install dependencies'

    - bash: |
        set -e
        python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu > 0, f'GPU: {mgpu}'"
        python -m papermill --version
      displayName: 'Sanity check'

    - bash: python .actions/assistant.py convert-ipynb $(notebook)
      displayName: 'Generate notebook'

    - bash: |
        set -e
        mkdir $(PATH_DATASETS)
        python .actions/assistant.py bash-render $(notebook)
        cat .actions/_ipynb-render.sh
        bash .actions/_ipynb-render.sh
        git status
        git commit -m "publish [GPU]: $(notebook)"
      env:
        KAGGLE_USERNAME: $(KAGGLE_USERNAME)
        KAGGLE_KEY: $(KAGGLE_KEY)
      displayName: 'Render notebook'

    - bash: |
        git status
        git push https://$(PAT_GHOST)@github.com/Lightning-AI/tutorials.git $(PUB_BRANCH)
      displayName: 'Finish push'
